

import * as RedAgate from 'red-agate';
const jsx = RedAgate.createElement;
const JsxFragment = RedAgate.Fragment;
import { S, SS } from '../s-exp/s-expression';



describe("foo", function() {
    it("foo", function() {
        console.log(JSON.stringify(S`
# comment
(foo bar "baz" 12.345 -34.567 +56.789 ("qqq" www) #|
comment2
|#)
() ; comment3
()
        `));
        expect(1).toEqual(1);
    });
});



describe("foo", function() {
    it("foo", function() {
        console.log(JSON.stringify(S`
# comment
(foo bar "baz" 12.345 -34.567 +56.789 ("qqq" www) #|
comment2
|#)
() ; comment3
(${999}${"aaabbb"})
        `));
        expect(1).toEqual(1);
    });
});



describe("foo", function() {
    it("foo", function() {
        console.log(JSON.stringify(S`
# comment
'(foo bar "baz" 12.345 -34.567 +56.789 '("qqq" www) #|
comment2
|#)
() ; comment3
(${999}${"aaabbb"})
        `));
        expect(1).toEqual(1);
    });
});



describe("foo", function() {
    it("foo", function() {
        console.log(JSON.stringify(SS`
($quote 1)
        `));
        expect(1).toEqual(1);
    });
});



describe("foo", function() {
    it("foo", function() {
        console.log(JSON.stringify(SS`
($list ($list 53 54 55) 56 ($list 57 58 59))
        `));
        expect(1).toEqual(1);
    });
});



describe("foo", function() {
    it("foo", function() {
        console.log(JSON.stringify(SS`
($list ($quote ($list ($list 53 54 55) 56 ($list 57 58 59))))
        `));
        expect(1).toEqual(1);
    });
});



describe("foo", function() {
    it("foo", function() {
        console.log(JSON.stringify(SS`
# comment
($list 55 56 ($list 57 58 59))
($for ($list 92 93 94)
    ($quote ($get "$data"))
    ($if (== (% ($get "$data") 2) 1)
        ($get "$data")
        "it is odd."
        "hello."
    )
    ($quote 111)
    222
)
#|
comment2
|#
        `));
        expect(1).toEqual(1);
    });
});



describe("foo", function() {
    it("foo", function() {
        console.log(JSON.stringify(SS`
# comment
'(123 234 456)
($list 123 234 456)
($list 55 56 ($list 57 58 59))
($for ${[55, 56, 57]}                 ;; evalute once (inside the evalute('$__for'))
    ($quote ($get "$data"))           ;; evalute twice (inside the $__scope operator and inside the evalute('Template') that generated by $__for )
    ($if (== (% ($get "$data") 2) 1)
        ($get "$data")
        "it is odd."
        "hello." ${"sssss"}
        ${[111, 222, 333]}            ;; evalute twice (inside the $__if operator and inside the evalute('Template') that generated by $__if )
    )
    ($quote 111)
    222
    ${[444, 555, 666]}                ;; evalute twice (inside the $__scope operator and inside the evalute('Template') that generated by $__for )
)
(DIV (@ (style (width  "100%")
               (height "600px")
               (font   "1.2em 'Fira Sans', sans-serif"))
        (class ("foo" "bar" "baz"))
        (href "https://developer.mozilla.org/static/build/styles/locale-ja.7f758aed61b8.css")
        (rel  "stylesheet")
        (type "text/css") )
    "This is a child (1)"
    "This is a child (2)"
    "This is a child (3)"

    """
    1111 aaaaaaaa aa aaaaa aaaaaaa
    bbbbbbb bbbbb%%%(DIV "bbbbb")bbbb bbbbb
    ccccc cccc ccccccc cccc cccccc
    """

    """DIV
    2222 aaaaaaaa aa aaaaa aaaaaaa
    bbbbbbb bbbbb%%%(DIV "bbbbb")bbbb bbbbb
    ccccc cccc ccccccc cccc cccccc
    """

    """DIV@{(class ("www" "eee" "rrr") ) (id "32421")}
    3333 aaaaaaaa aa aaaaa aaaaaaa
    bbbbbbb bbbbb%%%(DIV "bbbbb")bbbb bbbbb
    ccccc cccc ccccccc cccc cccccc
    """
)
'${[777, 888, 999]}                   ;; keep as external value
($list ${[321, 432, 543]})            ;; to be [[321 432 543]]
($eval '${[421, 532, 643]})            ;; to be [421 532 643]
;${[521, 632, 743]}                   ;; to be syntax error
($if true ${[556677, 667788]})        ;; to be [556677 667788]
($if false ${[556671, 667781]})       ;; to be []
($if true ${[556672, 667782]} "aaa")  ;; to be [[556672 667782] "aaa"]
($if true "bbb")                      ;; to be "bbb"
($eval ($if false ${[556673, 667783]} "aaa")) ;; to be []
($eval ($if true ${[556674, 667784]} "aaa"))  ;; to be [[556674 667784] "aaa"]
#|
comment2
|#
        `));
        expect(1).toEqual(1);
    });
});



describe("foo", function() {
    it("foo", function() {
        console.log(JSON.stringify(S`
#!/usr/bin/s-exp

(Html5 (@ (lang "ja") )
    (head (@)
        (meta (@ (http-equiv "X-UA-Compatible")
                 (content    "IE=Edge") ))

        (link (@ (href "https://developer.mozilla.org/static/build/styles/locale-ja.7f758aed61b8.css")
                 (rel  "stylesheet")
                 (type "text/css") ))
        (link (@ (href "https://developer.mozilla.org/static/build/styles/locale-ja.7f758aed61b8.css")
                 (rel  "stylesheet")
                 (type "text/css") ))

        (script (@ (type "text/javascript") )
            """
            console.log('Hello, World!');
            """
        )
    )

    (body (@ (style (width  "100%")
                    (height "600px")
                    (font   "1.2em 'Fira Sans', sans-serif") )
             (class ("foo" "bar" "baz") ))

        #|
         |  Here is a block comment (1)!
         |  Here is a block comment (2)!
         |#
        """
        aaaa aaaaaaaa aa aaaaa aaaaaaa
        bbbbbbb bbbbb%%%(b "bbbbb")bbbb bbbbb
        ccccc cccc ccccccc cccc cccccc
        """

        """section
        aaaa aaaaaaaa aa aaaaa aaaaaaa
        bbbbbbb bbbbb%%%(b "bbbbb")bbbb bbbbb
        ccccc cccc ccccccc cccc cccccc
        """

        """section@{(id "123") (class "foo")}
        aaaa aaaaaaaa aa aaaaa aaaaaaa
        bbbbbbb bbbbb%%%(b "bbbbb")bbbb bbbbb
        ccccc cccc ccccccc cccc cccccc
        """

                                           ;; ($quote expr)    -> expr                    ;; expr SHOULD NOT evalute.
        ($for ($get "$data" 4 "orders")    ;; ($for list expr) -> (Template expr...expr)  ;; expr evalute list.length times.
            ($if (>= (data "$data") 10)    ;; ($if cond expr)  -> (Template expr) | ()    ;; expr SHOULD NOT evalute if cond is false.
                (div (@ (id "foo1") )
                    ;  Here is a line comment (1)!
                    ;  Here is a line comment (2)!
                    ;; Here is a line comment (3)!
                    ;; Here is a line comment (4)!

                    ($get "$data")
                    ($get "$parent" "$data")
                    ($let "foo" ($get "$data"))
                    ($get "$scope" "foo")

                    "aaaaaaaa" (b "bbbbbbbbbb") "cccccccccc"
                )
            )
        )
    )
)
        `));
        expect(1).toEqual(1);
    });
});
